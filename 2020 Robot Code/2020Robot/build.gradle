plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2020.3.2"
    id "maven-publish"
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

javadoc {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.runtimeClasspath
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation "edu.wpi.first.wpilibj:wpilibj-java:${wpi.wpilibVersion}".toString()
    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    testImplementation 'junit:junit:4.12'

    // Enable simulation gui support. Must check the box in vscode to enable support
    // upon debugging
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
}

ext {
    jarToPublish = file( 'pixy2-java-api.jar' )
}

jar {
	baseName 'pixy2-java-api'
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

task sourceJar(type: Jar, dependsOn: classes) {
	baseName 'pixy2-java-api'
    classifier 'sources'
    from sourceSets.main.allSource
}
 
task javadocJar(type: Jar, dependsOn: javadoc) {
	baseName 'pixy2-java-api'
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
       	 	from components.java
        	artifact sourceJar
            artifact javadocJar
        	groupId = 'pw.otake.pseudoresonance'
            artifactId = 'pixy2-java-api'
            version = '1.4'
            pom {
                name = 'Pixy2JavaAPI'
                description = 'Java port of Pixy2 API for FIRST Robotics'
                url = 'https://github.com/PseudoResonance/Pixy2JavaAPI/'
                licenses {
                    license {
                        name = 'GNU General Public License, version 2'
                        url = 'http://www.gnu.org/licenses/gpl-2.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'PseudoResonance'
                        name = 'Josh Otake'
                        email = 'kaio11602@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
       	 	def releasesRepoUrl = "http://192.168.0.20:8081/repository/maven-releases/"
            def snapshotsRepoUrl = "http://192.168.0.20:8081/repository/maven-snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('nexus_username') ? nexus_username : (System.getenv('NEXUS_USERNAME') != null ? System.getenv('NEXUS_USERNAME') : '')
                password = project.hasProperty('nexus_password') ? nexus_password : (System.getenv('NEXUS_PASSWORD') != null ? System.getenv('NEXUS_PASSWORD') : '')
            }
        }
    }
}